{% extends 'base-back.html.twig' %}

{% block title %}Gestion des Réclamations{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.min.css" rel="stylesheet">
    <style>
        .chart-container {
            position: relative;
            height: 250px;
            width: 100%;
            margin-bottom: 20px;
        }
        .sort-link {
            color: inherit;
            text-decoration: none;
        }
        .sort-link:hover {
            text-decoration: underline;
        }
        .sort-icon {
            margin-left: 5px;
        }
        .filter-form {
            margin-bottom: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
    </style>
{% endblock %}

{% block body %}
    <main id="main" class="main">
        <div class="pagetitle">
            <h1>Gestion des Réclamations</h1>
            <nav>
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ path('app_admin') }}">Dashboard</a></li>
                    <li class="breadcrumb-item active">Réclamations</li>
                </ol>
            </nav>
        </div>

        <section class="section">
            <div class="row">
                <div class="col-lg-3 col-md-6">
                    <div class="card info-card">
                        <div class="card-body">
                            <h5 class="card-title">Total Réclamations</h5>
                            <div class="chart-container">
                                <canvas id="totalChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-3 col-md-6">
                    <div class="card info-card">
                        <div class="card-body">
                            <h5 class="card-title">État des Réclamations</h5>
                            <div class="chart-container">
                                <canvas id="etatChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Réclamations par type</h5>
                            <div class="chart-container">
                                <canvas id="typeChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Évolution mensuelle</h5>
                            <div class="chart-container">
                                <canvas id="evolutionChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Filtres</h5>
                            <form method="get" class="filter-form">
                                <div class="row g-3">
                                    <div class="col-md-4">
                                        <label for="type" class="form-label">Type</label>
                                        <select name="type" id="type" class="form-select">
                                            <option value="">Tous les types</option>
                                            {% for type in types %}
                                                <option value="{{ type }}" {% if currentType == type %}selected{% endif %}>
                                                    {{ type }}
                                                </option>
                                            {% endfor %}
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="etat" class="form-label">État</label>
                                        <select name="etat" id="etat" class="form-select">
                                            <option value="">Tous les états</option>
                                            {% for etat in etats %}
                                                <option value="{{ etat }}" {% if currentEtat == etat %}selected{% endif %}>
                                                    {{ etat }}
                                                </option>
                                            {% endfor %}
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <label for="search" class="form-label">Recherche</label>
                                        <div class="input-group">
                                            <input type="text" class="form-control" id="search" name="search" value="{{ searchQuery }}" placeholder="Rechercher dans tous les champs...">
                                            <button class="btn btn-outline-secondary" type="submit">
                                                <i class="bi bi-search"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="col-12">
                                        <button type="submit" class="btn btn-primary">Filtrer</button>
                                        <a href="{{ path('reclamationBack') }}" class="btn btn-secondary">Réinitialiser</a>
                                    </div>
                                </div>
                            </form>

                            <h5 class="card-title">Liste des Réclamations</h5>

                            {% for message in app.flashes('success') %}
                                <div class="alert alert-success alert-dismissible fade show" role="alert">
                                    {{ message }}
                                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                                </div>
                            {% endfor %}

                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>
                                                <a href="{{ path('reclamationBack', app.request.query.all|merge({
                                                    'sort': 'idRec',
                                                    'direction': currentSort == 'idRec' and currentDirection == 'ASC' ? 'DESC' : 'ASC'
                                                })) }}" class="sort-link">
                                                    ID
                                                    {% if currentSort == 'idRec' %}
                                                        <i class="bi bi-arrow-{{ currentDirection == 'ASC' ? 'up' : 'down' }} sort-icon"></i>
                                                    {% endif %}
                                                </a>
                                            </th>
                                            <th>
                                                <a href="{{ path('reclamationBack', app.request.query.all|merge({
                                                    'sort': 'descriptionRec',
                                                    'direction': currentSort == 'descriptionRec' and currentDirection == 'ASC' ? 'DESC' : 'ASC'
                                                })) }}" class="sort-link">
                                                    Description
                                                    {% if currentSort == 'descriptionRec' %}
                                                        <i class="bi bi-arrow-{{ currentDirection == 'ASC' ? 'up' : 'down' }} sort-icon"></i>
                                                    {% endif %}
                                                </a>
                                            </th>
                                            <th>
                                                <a href="{{ path('reclamationBack', app.request.query.all|merge({
                                                    'sort': 'dateRec',
                                                    'direction': currentSort == 'dateRec' and currentDirection == 'ASC' ? 'DESC' : 'ASC'
                                                })) }}" class="sort-link">
                                                    Date
                                                    {% if currentSort == 'dateRec' %}
                                                        <i class="bi bi-arrow-{{ currentDirection == 'ASC' ? 'up' : 'down' }} sort-icon"></i>
                                                    {% endif %}
                                                </a>
                                            </th>
                                            <th>
                                                <a href="{{ path('reclamationBack', app.request.query.all|merge({
                                                    'sort': 'typeRec',
                                                    'direction': currentSort == 'typeRec' and currentDirection == 'ASC' ? 'DESC' : 'ASC'
                                                })) }}" class="sort-link">
                                                    Type
                                                    {% if currentSort == 'typeRec' %}
                                                        <i class="bi bi-arrow-{{ currentDirection == 'ASC' ? 'up' : 'down' }} sort-icon"></i>
                                                    {% endif %}
                                                </a>
                                            </th>
                                            <th>
                                                <a href="{{ path('reclamationBack', app.request.query.all|merge({
                                                    'sort': 'etatRec',
                                                    'direction': currentSort == 'etatRec' and currentDirection == 'ASC' ? 'DESC' : 'ASC'
                                                })) }}" class="sort-link">
                                                    État
                                                    {% if currentSort == 'etatRec' %}
                                                        <i class="bi bi-arrow-{{ currentDirection == 'ASC' ? 'up' : 'down' }} sort-icon"></i>
                                                    {% endif %}
                                                </a>
                                            </th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {% for reclamation in reclamations %}
                                            <tr>
                                                <td>{{ reclamation.idRec }}</td>
                                                <td>{{ reclamation.descriptionRec }}</td>
                                                <td>{{ reclamation.dateRec ? reclamation.dateRec|date('Y-m-d H:i:s') : '' }}</td>
                                                <td>{{ reclamation.typeRec }}</td>
                                                <td>
                                                    <span class="badge bg-{{ reclamation.etatRec == 'En cours' ? 'warning' : (reclamation.etatRec == 'Résolue' ? 'success' : 'danger') }}">
                                                        {{ reclamation.etatRec }}
                                                    </span>
                                                </td>
                                                <td>
                                                    <div class="btn-group" role="group">
                                                        <a href="{{ path('app_reclamation_show', {'id_rec': reclamation.idRec}) }}" class="btn btn-sm btn-info">
                                                            <i class="bi bi-eye"></i>
                                                        </a>
                                                    </div>
                                                </td>
                                            </tr>
                                        {% else %}
                                            <tr>
                                                <td colspan="6" class="text-center">Aucune réclamation trouvée</td>
                                            </tr>
                                        {% endfor %}
                                    </tbody>
                                </table>
                                
                            </div>
                            <div class="col-12 mt-3">
                                <a href="{{ path('generatePDF') }}" class="btn btn-primary">
                                    <i class="bi bi-file-pdf"></i> Générer PDF
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Total Réclamations Chart
            new Chart(document.getElementById('totalChart'), {
                type: 'doughnut',
                data: {
                    labels: ['Ce mois', 'Autres mois'],
                    datasets: [{
                        data: [{{ stats.moisActuel }}, {{ stats.total - stats.moisActuel }}],
                        backgroundColor: ['#4e73df', '#1cc88a']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // État des Réclamations Chart
            new Chart(document.getElementById('etatChart'), {
                type: 'pie',
                data: {
                    labels: ['En cours', 'Résolues', 'Rejetées'],
                    datasets: [{
                        data: [{{ stats.enCours }}, {{ stats.resolues }}, {{ stats.rejetees }}],
                        backgroundColor: ['#f6c23e', '#1cc88a', '#e74a3b']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Réclamations par type Chart
            const typeData = {
                labels: [],
                values: []
            };
            {% for type, nombre in stats.parType %}
                typeData.labels.push("{{ type }}");
                typeData.values.push({{ nombre }});
            {% endfor %}

            new Chart(document.getElementById('typeChart'), {
                type: 'bar',
                data: {
                    labels: typeData.labels,
                    datasets: [{
                        label: 'Nombre de réclamations',
                        data: typeData.values,
                        backgroundColor: '#36b9cc',
                        borderRadius: 5
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        }
                    }
                }
            });

            // Évolution mensuelle Chart
            const evolutionData = {
                labels: [],
                values: [],
                previousValues: []
            };
            {% set prevValue = null %}
            {% for mois, nombre in stats.parMois %}
                evolutionData.labels.push("{{ mois }}");
                evolutionData.values.push({{ nombre }});
                {% if prevValue is not null %}
                    {% set evolution = ((nombre - prevValue) / prevValue * 100)|round(2) %}
                    evolutionData.previousValues.push({{ evolution }});
                {% else %}
                    evolutionData.previousValues.push(0);
                {% endif %}
                {% set prevValue = nombre %}
            {% endfor %}

            new Chart(document.getElementById('evolutionChart'), {
                type: 'line',
                data: {
                    labels: evolutionData.labels,
                    datasets: [{
                        label: 'Nombre de réclamations',
                        data: evolutionData.values,
                        borderColor: '#4e73df',
                        backgroundColor: 'rgba(78, 115, 223, 0.1)',
                        tension: 0.1,
                        fill: true
                    }, {
                        label: 'Évolution (%)',
                        data: evolutionData.previousValues,
                        borderColor: '#1cc88a',
                        borderDash: [5, 5],
                        tension: 0.1,
                        yAxisID: 'percentage'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            }
                        },
                        percentage: {
                            position: 'right',
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                }
                            }
                        }
                    }
                }
            });
        });
    </script>
{% endblock %}