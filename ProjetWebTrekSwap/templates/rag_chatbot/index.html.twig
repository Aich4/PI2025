{% extends 'base.html.twig' %}

{% block title %}RAG Chatbot{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .chat-container {
            height: 65vh;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            background-color: #f9f9f9;
        }
        
        .chat-input-container {
            display: flex;
            padding: 10px;
            background-color: #fff;
            border-top: 1px solid #e0e0e0;
        }
        
        .chat-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
        }
        
        .send-button {
            margin-left: 10px;
            padding: 10px 20px;
            border: none;
            border-radius: 20px;
            background-color: #4c6ef5;
            color: white;
            cursor: pointer;
        }
        
        .message {
            margin-bottom: 15px;
            max-width: 80%;
        }
        
        .message-user {
            margin-left: auto;
            background-color: #4c6ef5;
            color: white;
            border-radius: 18px 18px 0 18px;
            padding: 10px 15px;
        }
        
        .message-assistant {
            margin-right: auto;
            background-color: #e9ecef;
            color: #212529;
            border-radius: 18px 18px 18px 0;
            padding: 10px 15px;
        }
        
        .message-time {
            font-size: 0.75rem;
            color: #6c757d;
            margin-top: 5px;
            text-align: right;
        }
        
        .status-indicator {
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: bold;
        }
        
        .status-online {
            background-color: #28a745;
            color: white;
        }
        
        .status-offline {
            background-color: #dc3545;
            color: white;
        }
        
        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
{% endblock %}

{% block body %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-3">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">RAG Chatbot Status</h5>
                </div>
                <div class="card-body">
                    <h6>API Status</h6>
                    {% if documents_loaded %}
                        <span class="status-indicator status-online">Connected</span>
                    {% else %}
                        <span class="status-indicator status-offline">Disconnected</span>
                    {% endif %}
                    
                    <hr>
                    
                    <h6>Documents</h6>
                    <p>
                        {% if documents_loaded %}
                            <span class="badge bg-success">{{ document_count }} documents loaded</span>
                        {% else %}
                            <span class="badge bg-warning text-dark">No documents loaded</span>
                        {% endif %}
                    </p>
                    
                    <hr>
                    
                    <h6>Upload PDF</h6>
                    <form id="uploadForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <input type="file" class="form-control form-control-sm" id="pdfFile" name="pdf_file" accept="application/pdf">
                        </div>
                        <button type="submit" class="btn btn-primary btn-sm">Upload & Process</button>
                    </form>
                    
                    <hr>
                    
                    <div class="d-grid gap-2">
                        <button id="resetChatBtn" class="btn btn-outline-secondary btn-sm">Reset Chat</button>
                        <button id="clearDatabaseBtn" class="btn btn-outline-danger btn-sm">Clear Document Database</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-9">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Chat with your Documents</h5>
                </div>
                <div class="card-body p-0">
                    <div class="chat-container">
                        <div class="chat-messages" id="chatMessages">
                            {% if messages is empty %}
                                <div class="text-center text-muted py-5">
                                    <p>Start a conversation with your documents</p>
                                    {% if not documents_loaded %}
                                        <p class="text-danger">Please upload PDF documents first</p>
                                    {% endif %}
                                </div>
                            {% else %}
                                {% for message in messages %}
                                    <div class="message message-{{ message.role }}">
                                        {{ message.content|nl2br }}
                                        <div class="message-time">
                                            {{ message.timestamp|date('H:i:s') }}
                                        </div>
                                    </div>
                                {% endfor %}
                            {% endif %}
                        </div>
                        <div class="chat-input-container">
                            <input type="text" class="chat-input" id="messageInput" placeholder="Type your message..." {% if not documents_loaded %}disabled{% endif %}>
                            <button class="send-button" id="sendButton" {% if not documents_loaded %}disabled{% endif %}>
                                <span id="sendText">Send</span>
                                <div id="loadingSpinner" class="loading-spinner"></div>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatMessages = document.getElementById('chatMessages');
            const messageInput = document.getElementById('messageInput');
            const sendButton = document.getElementById('sendButton');
            const sendText = document.getElementById('sendText');
            const loadingSpinner = document.getElementById('loadingSpinner');
            const uploadForm = document.getElementById('uploadForm');
            const resetChatBtn = document.getElementById('resetChatBtn');
            const clearDatabaseBtn = document.getElementById('clearDatabaseBtn');
            
            // Scroll to bottom of chat
            function scrollToBottom() {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
            
            // Add a new message to the chat
            function addMessage(message, isUser = true) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message message-${isUser ? 'user' : 'assistant'}`;
                messageDiv.innerHTML = message.content.replace(/\n/g, '<br>');
                
                const timeDiv = document.createElement('div');
                timeDiv.className = 'message-time';
                timeDiv.textContent = new Date().toLocaleTimeString();
                messageDiv.appendChild(timeDiv);
                
                chatMessages.appendChild(messageDiv);
                scrollToBottom();
            }
            
            // Show loading state
            function setLoading(isLoading) {
                if (isLoading) {
                    sendText.style.display = 'none';
                    loadingSpinner.style.display = 'block';
                    messageInput.disabled = true;
                    sendButton.disabled = true;
                } else {
                    sendText.style.display = 'block';
                    loadingSpinner.style.display = 'none';
                    messageInput.disabled = false;
                    sendButton.disabled = false;
                }
            }
            
            // Send a message
            async function sendMessage() {
                const message = messageInput.value.trim();
                if (!message) return;
                
                try {
                    // Add user message to UI
                    addMessage({ content: message }, true);
                    messageInput.value = '';
                    
                    // Show loading state
                    setLoading(true);
                    
                    // Send to backend
                    const response = await fetch('{{ path('app_chatbot_send') }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: new URLSearchParams({
                            message: message
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        // Add assistant message to UI
                        addMessage(data.message, false);
                    } else {
                        throw new Error(data.error || 'Unknown error occurred');
                    }
                } catch (error) {
                    console.error('Error sending message:', error);
                    alert('Error: ' + error.message);
                } finally {
                    setLoading(false);
                }
            }
            
            // Upload PDF
            async function uploadPdf(formData) {
                try {
                    const response = await fetch('{{ path('app_chatbot_upload') }}', {
                        method: 'POST',
                        body: formData
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        alert(data.message);
                        window.location.reload();
                    } else {
                        throw new Error(data.error || 'Unknown error occurred');
                    }
                } catch (error) {
                    console.error('Error uploading PDF:', error);
                    alert('Error: ' + error.message);
                }
            }
            
            // Reset chat
            async function resetChat() {
                if (!confirm('Are you sure you want to clear the chat history?')) return;
                
                try {
                    const response = await fetch('{{ path('app_chatbot_reset') }}', {
                        method: 'POST'
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        chatMessages.innerHTML = `
                            <div class="text-center text-muted py-5">
                                <p>Start a conversation with your documents</p>
                                {% if not documents_loaded %}
                                    <p class="text-danger">Please upload PDF documents first</p>
                                {% endif %}
                            </div>
                        `;
                    } else {
                        throw new Error(data.error || 'Unknown error occurred');
                    }
                } catch (error) {
                    console.error('Error resetting chat:', error);
                    alert('Error: ' + error.message);
                }
            }
            
            // Clear database
            async function clearDatabase() {
                if (!confirm('Are you sure you want to clear all documents from the database?')) return;
                
                try {
                    const response = await fetch('{{ path('app_chatbot_clear_database') }}', {
                        method: 'POST'
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        alert(data.message);
                        window.location.reload();
                    } else {
                        throw new Error(data.error || 'Unknown error occurred');
                    }
                } catch (error) {
                    console.error('Error clearing database:', error);
                    alert('Error: ' + error.message);
                }
            }
            
            // Event listeners
            sendButton.addEventListener('click', sendMessage);
            messageInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            uploadForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const fileInput = document.getElementById('pdfFile');
                if (!fileInput.files[0]) {
                    alert('Please select a PDF file');
                    return;
                }
                const formData = new FormData();
                formData.append('pdf_file', fileInput.files[0]);
                uploadPdf(formData);
            });
            
            resetChatBtn.addEventListener('click', resetChat);
            clearDatabaseBtn.addEventListener('click', clearDatabase);
            
            // Auto-scroll to bottom on load
            scrollToBottom();
        });
    </script>
{% endblock %}