{% extends 'base-back.html.twig' %}

{% block title %}Task Management{% endblock %}

{% block body %}
<div>
  <title>Drag-and-Drop To-Do Dashboard</title>
  <style>
    /* Modern Reset */
    * { margin: 0; padding: 0; box-sizing: border-box; }

    body {
      font-family: 'Segoe UI', sans-serif;
      background: #f8f9fa;
      padding: 20px;
      color: #333;
    }

    h1 {
      text-align: center;
      margin-bottom: 20px;
      color: #2c3e50;
    }

    /* Task Form */
    .task-form {
      background: white;
      max-width: 600px;
      margin: 0 auto 30px;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      display: flex;
      gap: 10px;
    }

    .task-form input {
      flex: 1;
      padding: 12px;
      border: 2px solid #ddd;
      border-radius: 6px;
      font-size: 16px;
      transition: border 0.3s;
    }

    .task-form input:focus {
      border-color: #3498db;
      outline: none;
    }

    .task-form button {
      padding: 12px 20px;
      background: #3498db;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-weight: bold;
      transition: background 0.3s;
    }

    .task-form button:hover {
      background: #2980b9;
    }

    /* Dashboard */
    .dashboard {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
      max-width: 1200px;
      margin: 0 auto;
    }

    /* Columns */
    .column {
      background: white;
      border-radius: 10px;
      padding: 15px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      min-height: 300px;
    }

    .column h2 {
      text-align: center;
      padding-bottom: 15px;
      margin-bottom: 15px;
      border-bottom: 2px solid #eee;
      font-size: 1.2rem;
    }

    /* Column-specific colors */
    #pending { border-top: 5px solid #f39c12; }
    #doing { border-top: 5px solid #3498db; }
    #done { border-top: 5px solid #2ecc71; }

    /* Tasks */
    .task {
      background: #fff;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      padding: 12px;
      margin-bottom: 12px;
      cursor: grab;
      position: relative;
      transition: all 0.2s;
    }

    .task:hover {
      transform: translateY(-2px);
      box-shadow: 0 3px 5px rgba(0,0,0,0.1);
    }

    .task:active {
      cursor: grabbing;
    }

    .delete-btn {
      position: absolute;
      right: 10px;
      top: 10px;
      width: 22px;
      height: 22px;
      background: #e74c3c;
      color: white;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      font-size: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transition: opacity 0.2s;
    }

    .task:hover .delete-btn {
      opacity: 1;
    }

    /* Drop highlighting */
    .column.highlight {
      background: #f8fafc;
      outline: 2px dashed #3498db;
    }
  </style>

  <h1>My To-Do Dashboard</h1>
  
  <!-- Task Creation Form -->
  <div class="task-form">
    <input type="text" id="new-task-input" placeholder="What needs to be done?">
    <button onclick="addTask()">Add Task</button>
  </div>
  
  <!-- Dashboard Columns -->
  <div class="dashboard">
    <!-- Pending -->
    <div id="pending" class="column" 
         ondrop="drop(event)" ondragover="allowDrop(event)" 
         ondragenter="highlight(event)" ondragleave="unhighlight(event)">
      <h2>‚è≥ Pending</h2>
      {% for task in tasks %}
        {% if task.status == 'pending' %}
          <div class="task" draggable="true" id="task{{ task.id }}" ondragstart="drag(event)">
            {{ task.title }}
            <button class="delete-btn" onclick="deleteTask('task{{ task.id }}')">√ó</button>
          </div>
        {% endif %}
      {% endfor %}
    </div>
    
    <!-- Doing -->
    <div id="doing" class="column" 
         ondrop="drop(event)" ondragover="allowDrop(event)" 
         ondragenter="highlight(event)" ondragleave="unhighlight(event)">
      <h2>üîÑ In Progress</h2>
      {% for task in tasks %}
        {% if task.status == 'doing' %}
          <div class="task" draggable="true" id="task{{ task.id }}" ondragstart="drag(event)">
            {{ task.title }}
            <button class="delete-btn" onclick="deleteTask('task{{ task.id }}')">√ó</button>
          </div>
        {% endif %}
      {% endfor %}
    </div>
    
    <!-- Done -->
    <div id="done" class="column" 
         ondrop="drop(event)" ondragover="allowDrop(event)" 
         ondragenter="highlight(event)" ondragleave="unhighlight(event)">
      <h2>‚úÖ Completed</h2>
      {% for task in tasks %}
        {% if task.status == 'done' %}
          <div class="task" draggable="true" id="task{{ task.id }}" ondragstart="drag(event)">
            {{ task.title }}
            <button class="delete-btn" onclick="deleteTask('task{{ task.id }}')">√ó</button>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>

  <script>
    // Add new task
    function addTask() {
      const input = document.getElementById('new-task-input');
      const text = input.value.trim();
      
      if (!text) {
        alert("Please enter a task!");
        return;
      }
      
      fetch('{{ path('app_task_new') }}', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: text
        })
      })
      .then(response => response.json())
      .then(data => {
        const pendingColumn = document.getElementById('pending');
        const task = document.createElement('div');
        task.className = 'task';
        task.id = 'task' + data.id;
        task.draggable = true;
        task.innerHTML = `
          ${data.title}
          <button class="delete-btn" onclick="deleteTask('task${data.id}')">√ó</button>
        `;
        task.setAttribute('ondragstart', 'drag(event)');
        pendingColumn.appendChild(task);
        input.value = '';
      });
    }
    
    // Delete task
    function deleteTask(taskId) {
      const id = taskId.replace('task', '');
      fetch(`/task/${id}`, {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === 'success') {
          document.getElementById(taskId).remove();
        }
      });
    }
    
    // Drag and drop functions
    function allowDrop(ev) {
      ev.preventDefault();
    }
    
    function highlight(ev) {
      ev.preventDefault();
      ev.currentTarget.classList.add('highlight');
    }
    
    function unhighlight(ev) {
      ev.currentTarget.classList.remove('highlight');
    }
    
    function drag(ev) {
      ev.dataTransfer.setData("text", ev.target.id);
    }
    
    function drop(ev) {
      ev.preventDefault();
      const taskId = ev.dataTransfer.getData("text");
      const task = document.getElementById(taskId);
      const newStatus = ev.currentTarget.id;
      const id = taskId.replace('task', '');
      
      fetch(`/task/${id}/status`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          status: newStatus
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === 'success') {
          ev.currentTarget.appendChild(task);
          ev.currentTarget.classList.remove('highlight');
        }
      });
    }
    
    // Press Enter to add task
    document.getElementById('new-task-input').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') addTask();
    });
  </script>
</div>
{% endblock %} 