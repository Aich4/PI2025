# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    uploads_directory: '%kernel.project_dir%/public/uploads'
    profile_pictures_directory: '%kernel.project_dir%/public/uploads/profile_pictures'
    logos_directory: '%kernel.project_dir%/public/uploads/logos'
    twilio_account_sid: '%env(TWILIO_ACCOUNT_SID)%'
    twilio_auth_token: '%env(TWILIO_AUTH_TOKEN)%'
    twilio_phone_number: '%env(TWILIO_PHONE_NUMBER)%'
    twilio_sid_user2: '%env(TWILIO_SID_USER2)%'
    twilio_auth_token_user2: '%env(TWILIO_AUTH_TOKEN_USER2)%'
    twilio_phone_number_user2: '%env(TWILIO_WHATSAPP_FROM_USER2)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $stripeSK: "%env(STRIPE_SK)%"
            string $sid: '%env(TWILIO_SID)%'
            string $token: '%env(TWILIO_AUTH_TOKEN)%'
            string $from: '%env(TWILIO_WHATSAPP_NUMBER)%'

    App\Service\WhatsAppService:
        arguments:
            $sid: '%env(TWILIO_SID)%'
            $token: '%env(TWILIO_AUTH_TOKEN)%'
            $from: '%env(TWILIO_WHATSAPP_NUMBER)%'


    
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Login Success Listener
    App\EventListener\LoginSuccessListener:
        tags:
            - { name: kernel.event_listener, event: security.authentication.success, method: onLoginSuccess }

    # Logout Success Listener
    App\EventListener\LogoutSuccessListener:
        tags:
            - { name: kernel.event_listener, event: Symfony\Component\Security\Http\Event\LogoutEvent, method: onLogoutSuccess }
